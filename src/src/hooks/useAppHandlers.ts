import { useRef } from 'react';
import { useApp } from '../context/AppContext';
import { defaultRole } from '../constants/defaultRoles';
import { streamTrialMessage } from '../providers/gemini';
import { Message, Role, Conversation, Project, Mode } from '../types';
import { useCrossModeGuard } from './useCrossModeGuard';
import { toast } from "sonner";
import { 
  rolePersistenceService, 
  saveRolePersistence, 
  getRolePersistence, 
  getActiveRole 
} from '../services/rolePersistenceService';
import { 
  conversationTimelineService,
  generateSummary,
  setReminder,
  checkReminderTrigger 
} from '../services/conversationTimelineService';
import { 
  keywordResponseService,
  saveKeywordSettings,
  getKeywordSettings,
  DEFAULT_KEYWORDS 
} from '../services/keywordResponseService';
import { getCurrentUserId } from '../services/googleService';
import { 
  ServerlessLimitationService,
  validateAction,
  trackUsage,
  getCurrentUsage,
  type LimitationAction,
  type CurrentUsage 
} from '../services/serverlessLimitationService';

export function useAppHandlers() {
  const { 
    state, 
    setActiveChat, 
    setSelectedRole, 
    setSidebarExpanded, 
    setLoading, 
    setError, 
    setGenerationStopped,
    addConversation, 
    updateConversation, 
    deleteConversation, 
    addProject, 
    updateProject, 
    deleteProject, 
    addRole 
  } = useApp();

  const messageIdCounter = useRef(0);
  const abortControllerRef = useRef<AbortController | null>(null);

  // Cross-Mode Guard ÌõÖ
  const crossModeGuard = useCrossModeGuard({
    onSwitchChatMode: (chatId: string, newMode: Mode) => {
      toast.success(`Ï±ÑÌåÖ Î™®ÎìúÎ•º ${newMode}ÏúºÎ°ú Î≥ÄÍ≤ΩÌñàÏäµÎãàÎã§.`);
    },
    onCloneRole: async (roleId: string, targetMode: Mode) => {
      const originalRole = state.roles.find(r => r.id === roleId);
      if (originalRole) {
        const clonedRole: Role = {
          ...originalRole,
          id: `custom_${Date.now()}`,
          name: `${originalRole.name} (${targetMode.toUpperCase()})`,
          category: 'custom',
          isCustom: true,
          isPinned: false
        };
        
        addRole(clonedRole);
        return clonedRole.id;
      }
      throw new Error('Role not found');
    }
  });

  const handleSendMessage = async (message: string, searchResults?: any[]) => {
    if (!message.trim() || state.isLoading) return;

    // üîê ÏÑúÎ≤ÑÎ¶¨Ïä§ API Ìò∏Ï∂ú Ï†úÌïú Í≤ÄÏ¶ù
    const canProceed = await handleServerlessLimitationCheck('api_call');
    if (!canProceed) {
      return; // Ï†úÌïúÏóê Í±∏Î†∏ÏúºÎ©¥ Ï§ëÎã®
    }

    console.log('üìù Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÏûë:', {
      message: message.substring(0, 50) + '...',
      selectedRoleId: state.selectedRoleId,
      activeChatId: state.activeChatId,
      conversationsCount: state.conversations.length
    });

    setLoading(true);
    setGenerationStopped(false);
    
    // ÏÉàÎ°úÏö¥ AbortController ÏÉùÏÑ±
    abortControllerRef.current = new AbortController();
    
    const messageId = ++messageIdCounter.current;
    const selectedRole = state.selectedRoleId ? state.roles.find(r => r.id === state.selectedRoleId) : null;
    
    console.log('üîç Role ÌôïÏù∏:', {
      selectedRoleId: state.selectedRoleId,
      foundRole: selectedRole?.name,
      fallbackToDefault: !selectedRole
    });
    
    // Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ Î©îÏãúÏßÄÏóê Ìè¨Ìï®
    let enhancedMessage = message;
    if (searchResults && searchResults.length > 0) {
      const searchContext = searchResults.map(result => 
        `**${result.title}** (${result.source})\n${result.summary}\nÏ∂úÏ≤ò: ${result.url || 'N/A'}`
      ).join('\n\n---\n\n');
      
      enhancedMessage = `${message}\n\n## Ï∞∏Í≥† ÏûêÎ£å:\n\n${searchContext}`;
      
      console.log('üìö Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä Ìè¨Ìï®Îêú Î©îÏãúÏßÄ:', {
        originalMessage: message,
        searchResultsCount: searchResults.length,
        enhancedLength: enhancedMessage.length
      });
    }
    
    const userMessage: Message = {
      id: messageId,
      text: message, // ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî ÏõêÎ≥∏ Î©îÏãúÏßÄÎßå ÌëúÏãú
      sender: 'user',
      timestamp: new Date()
    };

    if (!state.activeChatId) {
      const newChatId = `chat_${Date.now()}`;
      
      const newConversation: Conversation = {
        id: newChatId,
        title: message.length > 50 ? message.substring(0, 50) + '...' : message,
        roleId: selectedRole?.id || defaultRole.id,
        messages: [userMessage],
        createdAt: new Date(),
        lastMessageAt: new Date()
      };
      
      console.log('üí¨ ÏÉà ÎåÄÌôî ÏÉùÏÑ±:', {
        chatId: newChatId,
        title: newConversation.title,
        roleId: newConversation.roleId,
        messagesCount: newConversation.messages.length
      });
      
      addConversation(newConversation);
      setActiveChat(newChatId);
      
      console.log('‚úÖ ÎåÄÌôî Ï∂îÍ∞Ä ÏôÑÎ£å, ÌôúÏÑ± Ï±ÑÌåÖ ÏÑ§Ï†ïÎê®:', newChatId);
      
      if (!selectedRole) {
        setSelectedRole(defaultRole.id);
        console.log('üîÑ Í∏∞Î≥∏ RoleÎ°ú ÏÑ§Ï†ï:', defaultRole.id);
      }
    } else {
      const currentChat = state.conversations.find(c => c.id === state.activeChatId);
      if (currentChat) {
        updateConversation(state.activeChatId, {
          messages: [...currentChat.messages, userMessage],
          lastMessageAt: new Date()
        });
      }
    }

    try {
      const aiMessageId = ++messageIdCounter.current;
      const aiMessage: Message = {
        id: aiMessageId,
        text: '',
        sender: 'ai',
        timestamp: new Date()
      };

      const activeChat = state.conversations.find(c => c.id === state.activeChatId);
      if (activeChat) {
        updateConversation(state.activeChatId!, {
          messages: [...activeChat.messages, aiMessage]
        });
      }

      let aiResponse = '';
      const roleToUse = selectedRole || defaultRole;
      
      try {
        for await (const chunk of streamTrialMessage(
          roleToUse,
          [...(activeChat?.messages || []), userMessage],
          [{ text: enhancedMessage }], // AIÏóêÍ≤åÎäî Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä Ìè¨Ìï®Îêú Î©îÏãúÏßÄ Ï†ÑÎã¨
          abortControllerRef.current?.signal
        )) {
          // Ï§ëÏßÄ Ïã†Ìò∏ ÌôïÏù∏
          if (state.isGenerationStopped || abortControllerRef.current?.signal.aborted) {
            console.log('üõë Generation stopped by user');
            aiResponse += aiResponse ? '\n\n[Ï§ëÏßÄÎê®]' : '[Ï§ëÏßÄÎê®]';
            break;
          }
          
          aiResponse += chunk;
          
          const currentActiveChat = state.conversations.find(c => c.id === state.activeChatId);
          if (currentActiveChat) {
            const updatedMessages = currentActiveChat.messages.map(msg => 
              msg.id === aiMessageId ? { ...msg, text: aiResponse } : msg
            );
            updateConversation(state.activeChatId!, {
              messages: updatedMessages,
              lastMessageAt: new Date()
            });
          }
        }
      } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
          console.log('üõë Request aborted by user');
          aiResponse += aiResponse ? '\n\n[Ï§ëÏßÄÎê®]' : '[Ï§ëÏßÄÎê®]';
          
          const currentActiveChat = state.conversations.find(c => c.id === state.activeChatId);
          if (currentActiveChat) {
            const updatedMessages = currentActiveChat.messages.map(msg => 
              msg.id === aiMessageId ? { ...msg, text: aiResponse } : msg
            );
            updateConversation(state.activeChatId!, {
              messages: updatedMessages,
              lastMessageAt: new Date()
            });
          }
        } else {
          throw error; // Îã§Î•∏ ÏóêÎü¨Îäî Îã§Ïãú ÎçòÏßÄÍ∏∞
        }
      }
    } catch (error) {
      const errorMessage: Message = {
        id: ++messageIdCounter.current,
        text: 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.',
        sender: 'ai',
        timestamp: new Date()
      };

      const activeChat = state.conversations.find(c => c.id === state.activeChatId);
      if (activeChat) {
        updateConversation(state.activeChatId!, {
          messages: [...activeChat.messages, errorMessage]
        });
      }
      
      setError(error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
      setGenerationStopped(false);
      abortControllerRef.current = null;
      
      // üîê ÏÑúÎ≤ÑÎ¶¨Ïä§ API Ìò∏Ï∂ú ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å
      await handleServerlessUsageTracking('api_call', {
        messageLength: message.length,
        roleId: state.selectedRoleId,
        hasSearchResults: !!(searchResults && searchResults.length > 0)
      });
      
      // üéØ ÏÑúÎ≤ÑÎ¶¨Ïä§ ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â Í∏∞Îä• ÌÜµÌï©
      try {
        if (state.activeChatId) {
          const currentChat = state.conversations.find(c => c.id === state.activeChatId);
          if (currentChat && currentChat.messages.length > 0) {
            const userId = getCurrentUserId();
            const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
            const messageIndex = currentChat.messages.length - 1;
            
            // Î¶¨ÎßàÏù∏Îçî Ìä∏Î¶¨Í±∞ ÌôïÏù∏
            await checkReminderTrigger(userId, state.activeChatId, messageIndex);
            
            // üß† Î™®ÎìúÎ≥Ñ ÏßÄÎä•Ìòï ÏûêÎèô ÏöîÏïΩ ÏãúÏä§ÌÖú
            const modeLimitations = await conversationTimelineService.getModeLimitations(userMode);
            const limits = modeLimitations.limitations;
            
            // ÏûêÎèô ÏöîÏïΩ Ï°∞Í±¥ ÌôïÏù∏ (Î™®ÎìúÎ≥Ñ Í∞ÑÍ≤© Ï†ÅÏö©)
            const summaryInterval = limits.summaryInterval || 12;
            if (messageIndex > 0 && messageIndex % summaryInterval === 0) {
              console.log(`üß† Î™®ÎìúÎ≥Ñ ÏßÄÎä•Ìòï ÏöîÏïΩ ÏÉùÏÑ± (${userMode}):`, {
                messageIndex,
                summaryInterval,
                format: limits.availableSummaryFormats[0]
              });
              
              // ÏßÄÎä•Ìòï ÏöîÏïΩ ÏÉùÏÑ± (Î™®ÎìúÎ≥Ñ ÏÑ§Ï†ï Ï†ÅÏö©)
              await conversationTimelineService.generateIntelligentSummary(
                userId,
                state.activeChatId,
                currentChat.messages,
                userMode
              );
            }
            
            // Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï ÌôïÏù∏ Î∞è Ï†ÅÏö©
            if (state.selectedRoleId) {
              const persistenceSettings = await getRolePersistence(userId, state.activeChatId);
              if (!persistenceSettings.settings) {
                // Ï≤´ Î≤àÏß∏ ÎåÄÌôîÏóêÏÑú Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï
                await saveRolePersistence(
                  userId,
                  state.activeChatId,
                  state.selectedRoleId,
                  'conversation',
                  {
                    keywordIds: [],
                    temperature: 0.7,
                    maxOutputTokens: 2048
                  }
                );
                console.log('üéØ Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï ÏûêÎèô ÏÉùÏÑ±:', state.selectedRoleId);
              }
            }
          }
        }
      } catch (serverlessError) {
        console.warn('ÏÑúÎ≤ÑÎ¶¨Ïä§ Í≥†Í∏â Í∏∞Îä• Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', serverlessError);
        // ÏÑúÎ≤ÑÎ¶¨Ïä§ Í∏∞Îä• Ïò§Î•òÎäî UIÏóê ÏòÅÌñ•Ï£ºÏßÄ ÏïäÎèÑÎ°ù Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
      }
    }
  };

  const handleRoleSelect = async (roleData: any) => {
    try {
      console.log('üéØ handleRoleSelect ÏãúÏûë:', roleData);
      
      if (roleData && typeof roleData === 'object' && roleData.id) {
        // RoleÏù¥ Ïã§Ï†úÎ°ú Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        const role = state.roles.find(r => r.id === roleData.id);
        if (!role) {
          console.warn(`‚ùå Role with id ${roleData.id} not found`);
          return false;
        }

        console.log('‚úÖ Role Ï∞æÏùå:', role.name);

        const decision = await crossModeGuard.openGuard({
          chatMode: state.userSettings.mode,
          roleMode: state.userSettings.mode,
          roleId: roleData.id,
          roleName: role.name,
          lang: 'ko'
        });

        console.log('üîÑ CrossModeGuard Í≤∞Í≥º:', decision);

        if (decision) {
          setSelectedRole(roleData.id);
          setActiveChat(null);
          console.log('‚úÖ Role ÏÑ†ÌÉù ÏôÑÎ£å:', roleData.id);
          
          // ÏÑúÎ≤ÑÎ¶¨Ïä§ Ïó≠Ìï† Í≥†Ï†ï Í∏∞Îä• ÌÜµÌï©
          try {
            const userId = getCurrentUserId();
            
            // Í∏ÄÎ°úÎ≤å Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï Ï†ÄÏû• (ÏÉà ÎåÄÌôîÏóê Ï†ÅÏö©)
            await saveRolePersistence(
              userId,
              null, // Í∏ÄÎ°úÎ≤å ÏÑ§Ï†ï
              roleData.id,
              'permanent',
              {
                keywordIds: [], // Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏãúÏûë
                temperature: 0.7,
                maxOutputTokens: 2048
              }
            );
            
            console.log('üéØ Í∏ÄÎ°úÎ≤å Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï Ï†ÄÏû•:', roleData.id);
            
            // Í∏∞Î≥∏ ÌÇ§ÏõåÎìú ÏÑ§Ï†ïÎèÑ Ìï®Íªò Ï†ÅÏö©
            await saveKeywordSettings(
              userId,
              null, // Í∏ÄÎ°úÎ≤å ÏÑ§Ï†ï
              roleData.id,
              DEFAULT_KEYWORDS.filter(kw => kw.isActive).slice(0, 3), // ÏÉÅÏúÑ 3Í∞ú Í∏∞Î≥∏ ÌÇ§ÏõåÎìú
              'flexible'
            );
            
            console.log('üè∑Ô∏è Í∏∞Î≥∏ ÌÇ§ÏõåÎìú ÏÑ§Ï†ï Ï†ÅÏö©');
            
          } catch (serverlessError) {
            console.warn('Ïó≠Ìï† Í≥†Ï†ï ÏÑúÎ≤ÑÎ¶¨Ïä§ Í∏∞Îä• Ïò§Î•ò:', serverlessError);
          }
          
          return true;
        }
      }
    } catch (error) {
      console.error('‚ùå Role ÏÑ†ÌÉù Ïò§Î•ò:', error);
    }
    return false;
  };

  const handleNewChat = () => {
    setActiveChat(null);
    if (state.userSettings.mode === 'standard') {
      setSelectedRole('guide');
    } else {
      setSelectedRole(null);
    }
    setSidebarExpanded(false);
  };

  const handleChatSelect = (chatId: string) => {
    const chat = state.conversations.find(c => c.id === chatId);
    if (chat) {
      setActiveChat(chatId);
      setSelectedRole(chat.roleId);
      setSidebarExpanded(false);
    }
  };

  const handleNewProject = () => {
    try {
      // Ìï≠ÏÉÅ ÏÉà ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±ÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
      const newProject: Project = {
        id: `project_${Date.now()}`,
        title: `ÏÉà ÌîÑÎ°úÏ†ùÌä∏ ${state.projects.length + 1}`,
        description: 'AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏôÄÏùò Ï†ïÎ≥¥Î•º Ï†ïÎ¶¨ÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§.',
        category: 'general',
        guidelines: '',
        createdAt: new Date(),
        lastModified: new Date(),
        chatCount: 0,
        isPinned: false
      };
      
      addProject(newProject);
      
      const projectNumber = state.projects.length + 1;
      const isFirst = projectNumber === 1;
      
      toast.success(`${isFirst ? 'Ï≤´ Î≤àÏß∏' : ''} ÌîÑÎ°úÏ†ùÌä∏ "${newProject.title}"Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!`);
      return { newProject, openProjectPage: true };
    } catch (error) {
      console.error('ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Ïò§Î•ò:', error);
      toast.error('ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      return {};
    }
  };

  const handleProjectSelectionModalSelect = (projectId: string) => {
    const targetChatId = state.activeChatId;
    if (!targetChatId) {
      toast.error('ÏÑ†ÌÉùÎêú Ï±ÑÌåÖÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }

    const project = state.projects.find(p => p.id === projectId);
    if (!project) {
      toast.error('ÌîÑÎ°úÏ†ùÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    updateConversation(targetChatId, { projectId: projectId });
    const currentChatCount = state.conversations.filter(c => c.projectId === projectId).length;
    updateProject(projectId, { chatCount: currentChatCount + 1 });
    
    toast.success(`Ï±ÑÌåÖÏù¥ "${project.title}" ÌîÑÎ°úÏ†ùÌä∏Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.`);
  };

  const handleProjectSelectionModalNewProject = () => {
    const newProject: Project = {
      id: `project_${Date.now()}`,
      title: 'ÏÉà ÌîÑÎ°úÏ†ùÌä∏',
      description: '',
      category: 'general',
      guidelines: '',
      createdAt: new Date(),
      lastModified: new Date(),
      chatCount: 0,
      isPinned: false
    };
    
    addProject(newProject);
    
    const targetChatId = state.activeChatId;
    if (targetChatId) {
      updateConversation(targetChatId, { projectId: newProject.id });
      updateProject(newProject.id, { chatCount: 1 });
      toast.success(`Ï±ÑÌåÖÏù¥ "${newProject.title}" ÌîÑÎ°úÏ†ùÌä∏Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.`);
    }
  };

  // Ï±ÑÌåÖ Ïï°ÏÖò Ìï∏Îì§Îü¨Îì§
  const getChatActionHandlers = () => {
    const currentChat = state.conversations.find(c => c.id === state.activeChatId);
    const selectedRole = state.selectedRoleId ? state.roles.find(r => r.id === state.selectedRoleId) : null;

    return {
      handleChatExport: () => {
        if (state.activeChatId && currentChat) {
          const chatData = {
            title: currentChat.title,
            role: selectedRole?.name || 'Í∏∞Î≥∏ Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏',
            messages: currentChat.messages,
            createdAt: currentChat.createdAt
          };
          
          const dataStr = JSON.stringify(chatData, null, 2);
          const dataBlob = new Blob([dataStr], { type: 'application/json' });
          const url = URL.createObjectURL(dataBlob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `${currentChat.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.json`;
          link.click();
          URL.revokeObjectURL(url);
          
          toast.success('Ï±ÑÌåÖÏù¥ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÎêòÏóàÏäµÎãàÎã§.');
        }
      },

      handleChatSave: () => {
        if (state.activeChatId && currentChat) {
          updateConversation(state.activeChatId, { isPinned: true });
          toast.success('Ï±ÑÌåÖÏù¥ Ï¶êÍ≤®Ï∞æÍ∏∞Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
        }
      },

      handleChatDelete: () => {
        if (state.activeChatId) {
          if (confirm('Ïù¥ Ï±ÑÌåÖÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            deleteConversation(state.activeChatId);
            setActiveChat(null);
            setSelectedRole(null);
            toast.success('Ï±ÑÌåÖÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
          }
        }
      },

      handleChatArchive: () => {
        if (state.activeChatId && currentChat) {
          const isCurrentlyPinned = currentChat.isPinned;
          updateConversation(state.activeChatId, { isPinned: !isCurrentlyPinned });
          
          if (isCurrentlyPinned) {
            toast.success('Ï±ÑÌåÖÏù¥ ÏïÑÏπ¥Ïù¥Î∏åÏóêÏÑú Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§.');
          } else {
            toast.success('Ï±ÑÌåÖÏù¥ ÏïÑÏπ¥Ïù¥Î∏åÏóê Î≥¥Í¥ÄÎêòÏóàÏäµÎãàÎã§.');
          }
        } else {
          toast.error('ÏÑ†ÌÉùÎêú Ï±ÑÌåÖÏù¥ ÏóÜÏäµÎãàÎã§.');
        }
      },

      handleChatShare: () => {
        if (state.activeChatId && currentChat) {
          const shareText = `Role GPT Ï±ÑÌåÖ: ${currentChat.title}`;
          
          if (navigator.share) {
            navigator.share({
              title: 'Role GPT Ï±ÑÌåÖ Í≥µÏú†',
              text: shareText,
              url: window.location.href
            }).then(() => {
              toast.success('Ï±ÑÌåÖÏù¥ Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§.');
            }).catch(() => {
              navigator.clipboard.writeText(shareText);
              toast.success('Í≥µÏú† ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
            });
          } else {
            navigator.clipboard.writeText(shareText);
            toast.success('Í≥µÏú† ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
          }
        }
      }
    };
  };

  // üî• ÏÉàÎ°úÏö¥ ÏÑúÎ≤ÑÎ¶¨Ïä§ Í∏∞Îä• Ìï∏Îì§Îü¨Îì§
  const handleRolePersistenceToggle = async (chatId: string, enable: boolean) => {
    try {
      const userId = getCurrentUserId();
      const currentChat = state.conversations.find(c => c.id === chatId);
      
      if (!currentChat || !currentChat.roleId) {
        toast.error('Ïó≠Ìï†Ïù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùÄ Ï±ÑÌåÖÏûÖÎãàÎã§.');
        return;
      }
      
      if (enable) {
        await saveRolePersistence(
          userId,
          chatId,
          currentChat.roleId,
          'conversation',
          {
            keywordIds: [],
            temperature: 0.7,
            maxOutputTokens: 2048
          }
        );
        toast.success('Ïù¥ ÎåÄÌôîÏóêÏÑú Ïó≠Ìï†Ïù¥ Í≥†Ï†ïÎêòÏóàÏäµÎãàÎã§.');
      } else {
        await saveRolePersistence(userId, chatId, '', 'session', {});
        toast.success('Ïó≠Ìï† Í≥†Ï†ïÏù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Ïó≠Ìï† Í≥†Ï†ï ÌÜ†Í∏Ä Ïò§Î•ò:', error);
      toast.error('Ïó≠Ìï† Í≥†Ï†ï ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleTimelineReminderSetup = async (chatId: string, reminderType: 'progress' | 'summary' | 'check_in') => {
    try {
      const userId = getCurrentUserId();
      
      await setReminder(
        userId,
        chatId,
        reminderType,
        undefined,
        { messageCount: 10 } // 10ÌÑ¥ÎßàÎã§ Î¶¨ÎßàÏù∏Îçî
      );
      
      toast.success('ÎåÄÌôî Î¶¨ÎßàÏù∏ÎçîÍ∞Ä ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Î¶¨ÎßàÏù∏Îçî ÏÑ§Ï†ï Ïò§Î•ò:', error);
      toast.error('Î¶¨ÎßàÏù∏Îçî ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleKeywordResponseSetup = async (chatId: string, keywordIds: string[]) => {
    try {
      const userId = getCurrentUserId();
      const selectedKeywords = DEFAULT_KEYWORDS.filter(kw => keywordIds.includes(kw.id));
      
      await saveKeywordSettings(
        userId,
        chatId,
        state.selectedRoleId || null,
        selectedKeywords,
        'flexible'
      );
      
      toast.success('ÌÇ§ÏõåÎìú ÏùëÎãµ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('ÌÇ§ÏõåÎìú ÏÑ§Ï†ï Ïò§Î•ò:', error);
      toast.error('ÌÇ§ÏõåÎìú ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleManualSummaryGeneration = async (chatId: string) => {
    try {
      const userId = getCurrentUserId();
      const currentChat = state.conversations.find(c => c.id === chatId);
      
      if (!currentChat || currentChat.messages.length < 5) {
        toast.error('ÏöîÏïΩÌï† Î©îÏãúÏßÄÍ∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§ (ÏµúÏÜå 5Í∞ú ÌïÑÏöî).');
        return;
      }
      
      toast.info('ÎåÄÌôî ÏöîÏïΩÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...');
      
      const result = await generateSummary(
        userId,
        chatId,
        currentChat.messages,
        0,
        currentChat.messages.length - 1,
        'bullet'
      );
      
      if (result.success) {
        toast.success('ÎåÄÌôî ÏöîÏïΩÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
        // TODO: ÏöîÏïΩ Í≤∞Í≥ºÎ•º UIÏóê ÌëúÏãúÌïòÎäî Î™®Îã¨Ïù¥ÎÇò Ìå®ÎÑê Íµ¨ÌòÑ
        console.log('üìã ÏÉùÏÑ±Îêú ÏöîÏïΩ:', result.summary);
      }
    } catch (error) {
      console.error('ÏàòÎèô ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);
      toast.error('ÏöîÏïΩ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // üéØ ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ï Ìï∏Îì§Îü¨ (Î™®ÎìúÎ≥Ñ Ï†úÌïú Ï†ÅÏö©)
  const handleAdvancedTimelineSettings = async (
    chatId: string, 
    settings: {
      summaryEnabled?: boolean;
      summaryInterval?: number;
      summaryFormat?: 'bullet' | 'paragraph' | 'sentences' | 'custom';
      reminderEnabled?: boolean;
      reminderInterval?: number;
    }
  ) => {
    try {
      const userId = getCurrentUserId();
      const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
      
      // Î™®ÎìúÎ≥Ñ Ï†úÌïúÏÇ¨Ìï≠ Î®ºÏ†Ä ÌôïÏù∏
      const limitations = await conversationTimelineService.getModeLimitations(userMode);
      
      if (!limitations.features.summaryControl && settings.summaryInterval) {
        toast.error(`${userMode} Î™®ÎìúÏóêÏÑúÎäî ÏöîÏïΩ ÏÑ§Ï†ïÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏóÜÏäµÎãàÎã§.`);
        return;
      }
      
      if (!limitations.features.summaryToggle && settings.summaryEnabled === false) {
        toast.error(`${userMode} Î™®ÎìúÏóêÏÑúÎäî ÏöîÏïΩÏùÑ ÎπÑÌôúÏÑ±ÌôîÌï† Ïàò ÏóÜÏäµÎãàÎã§.`);
        return;
      }
      
      const result = await conversationTimelineService.saveAdvancedSettings(
        userId,
        chatId,
        userMode,
        settings
      );
      
      if (result.success) {
        toast.success('ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ï Ïò§Î•ò:', error);
      toast.error('ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleIntelligentSummaryGeneration = async (chatId: string, forceGenerate: boolean = false) => {
    try {
      const userId = getCurrentUserId();
      const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
      const currentChat = state.conversations.find(c => c.id === chatId);
      
      if (!currentChat || currentChat.messages.length < 5) {
        toast.error('ÏöîÏïΩÌï† Î©îÏãúÏßÄÍ∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§ (ÏµúÏÜå 5Í∞ú ÌïÑÏöî).');
        return;
      }
      
      toast.info('ÏßÄÎä•Ìòï ÏöîÏïΩÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...');
      
      const result = await conversationTimelineService.generateIntelligentSummary(
        userId,
        chatId,
        currentChat.messages,
        userMode,
        forceGenerate ? { summaryEnabled: true } : undefined
      );
      
      if (result.success) {
        if (result.summary) {
          toast.success('ÏßÄÎä•Ìòï ÏöîÏïΩÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
          console.log('üìã ÏÉùÏÑ±Îêú ÏßÄÎä•Ìòï ÏöîÏïΩ:', result.summary);
        } else {
          toast.info(result.message || 'ÏöîÏïΩ ÏÉùÏÑ±Ïù¥ Ïä§ÌÇµÎêòÏóàÏäµÎãàÎã§.');
        }
      }
    } catch (error) {
      console.error('ÏßÄÎä•Ìòï ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);
      toast.error('ÏßÄÎä•Ìòï ÏöîÏïΩ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // üîê ÏÑúÎ≤ÑÎ¶¨Ïä§ Ï†úÌïúÏÇ¨Ìï≠ Ìï∏Îì§Îü¨Îì§
  const handleServerlessLimitationCheck = async (action: LimitationAction): Promise<boolean> => {
    try {
      const userId = getCurrentUserId();
      const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
      
      console.log('üîê ÏÑúÎ≤ÑÎ¶¨Ïä§ Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏ ÏãúÏûë:', { userId, userMode, action });
      
      // ÌòÑÏû¨ ÏÇ¨Ïö©Îüâ Ï°∞Ìöå
      const currentUsageData = await getCurrentUsage(userId);
      console.log('üìä ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:', currentUsageData);
      
      const currentUsage = currentUsageData.currentUsage;
      
      // Ïï°ÏÖò Ï†úÌïú Í≤ÄÏ¶ù
      const validation = await validateAction(userId, userMode, action, currentUsage);
      console.log('‚úÖ Ï†úÌïúÏÇ¨Ìï≠ Í≤ÄÏ¶ù Í≤∞Í≥º:', validation);
      
      if (!validation.allowed) {
        console.warn('üö´ Ïï°ÏÖò Ï∞®Îã®Îê®:', validation.reason);
        toast.error(validation.reason);
        if (validation.upgradeRequired) {
          toast.info('ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏó¨ Îçî ÎßéÏùÄ Í∏∞Îä•ÏùÑ Ïù¥Ïö©ÌïòÏÑ∏Ïöî.');
        }
        return false;
      }
      
      console.log('‚úÖ Ïï°ÏÖò ÌóàÏö©Îê®');
      return true;
    } catch (error) {
      console.error('‚ùå ÏÑúÎ≤ÑÎ¶¨Ïä§ Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏ Ïã§Ìå®:', error);
      console.error('üìä ÏóêÎü¨ Ïª®ÌÖçÏä§Ìä∏:', {
        userId,
        userMode,
        action,
        errorType: error?.constructor?.name,
        errorMessage: error?.message,
        currentUsageData
      });
      
      // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏóêÎü¨ Î©îÏãúÏßÄ
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.warn('üåê ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå® - ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ fallback Î°úÏßÅ ÏÇ¨Ïö©');
        toast.warning('ÏÑúÎ≤ÑÏôÄ Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏñ¥ Î°úÏª¨ Ï†úÌïúÏÇ¨Ìï≠ÏùÑ Ï†ÅÏö©Ìï©ÎãàÎã§.');
        // ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®Ïãú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Í∏∞Î≥∏ Ï†úÌïúÏÇ¨Ìï≠ Ï†ÅÏö©
        return handleClientSideLimitationCheck(action, state.userSettings.mode as 'standard' | 'advanced' | 'expert');
      }
      
      // Í∏∞ÌÉÄ Ïò§Î•òÏãú Ï∞®Îã® (Î≥¥ÏïàÏÉÅ ÏïàÏ†ÑÌïú Î∞©Ìñ•)
      const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
      toast.error(`Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏ Ïã§Ìå®: ${errorMessage}`);
      return false;
    }
  };

  const handleServerlessUsageTracking = async (action: LimitationAction, metadata?: any) => {
    try {
      const userId = getCurrentUserId();
      const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
      
      console.log('üìä ÏÑúÎ≤ÑÎ¶¨Ïä§ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å ÏãúÏûë:', { userId, userMode, action });
      
      await trackUsage(userId, userMode, action, metadata);
      console.log(`‚úÖ ÏÑúÎ≤ÑÏóêÏÑú ${action} ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å ÏôÑÎ£å`);
    } catch (error) {
      console.warn('‚ùå ÏÑúÎ≤ÑÎ¶¨Ïä§ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å Ïã§Ìå®:', error);
      // ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å Ïã§Ìå®Îäî Ï°∞Ïö©Ìûà Ï≤òÎ¶¨ (ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏóê ÏòÅÌñ• ÏóÜÏùå)
      
      // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Î°úÏª¨ÏóêÏÑú Í∞ÑÎã®Ìûà Ï∂îÏ†Å
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.log('üîÑ Î°úÏª¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†ÅÏúºÎ°ú fallback');
        handleLocalUsageTracking(action, metadata);
      }
    }
  };

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï†úÌïúÏÇ¨Ìï≠ Ï≤¥ÌÅ¨ (ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®Ïãú fallback)
  const handleClientSideLimitationCheck = (action: LimitationAction, userMode: 'standard' | 'advanced' | 'expert'): boolean => {
    console.log('üîÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï†úÌïúÏÇ¨Ìï≠ Ï≤¥ÌÅ¨:', { action, userMode });
    
    // Í∏∞Î≥∏Ï†ÅÏù∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï†úÌïúÏÇ¨Ìï≠ (Î≥¥ÏàòÏ†ÅÏúºÎ°ú ÏÑ§Ï†ï)
    const clientLimitations = {
      standard: { maxProjects: 2, maxConversations: 10, maxCustomRoles: 6 },
      advanced: { maxProjects: 5, maxConversations: 50, maxCustomRoles: 15 },
      expert: { maxProjects: 20, maxConversations: 200, maxCustomRoles: 50 }
    };
    
    const limits = clientLimitations[userMode] || clientLimitations.standard;
    
    // ÌòÑÏû¨ Î°úÏª¨ ÏÉÅÌÉú Í∏∞Î∞òÏúºÎ°ú Ï†úÌïú Í≤ÄÏ¶ù
    switch (action) {
      case 'create_project':
        const currentProjects = state.projects.length;
        if (currentProjects >= limits.maxProjects) {
          console.warn('üö´ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Ï†úÌïú (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏):', { current: currentProjects, max: limits.maxProjects });
          toast.error(`${userMode} Î™®ÎìúÏóêÏÑúÎäî ÏµúÎåÄ ${limits.maxProjects}Í∞úÏùò ÌîÑÎ°úÏ†ùÌä∏Îßå ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.`);
          return false;
        }
        break;
        
      case 'create_conversation':
        const currentChats = state.conversations.length;
        if (currentChats >= limits.maxConversations) {
          console.warn('üö´ ÎåÄÌôî ÏÉùÏÑ± Ï†úÌïú (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏):', { current: currentChats, max: limits.maxConversations });
          toast.error(`${userMode} Î™®ÎìúÏóêÏÑúÎäî ÏµúÎåÄ ${limits.maxConversations}Í∞úÏùò ÎåÄÌôîÎßå ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.`);
          return false;
        }
        break;
        
      case 'create_custom_role':
        const customRoles = state.roles.filter(r => r.isCustom).length;
        if (customRoles >= limits.maxCustomRoles) {
          console.warn('üö´ Ïª§Ïä§ÌÖÄ Ïó≠Ìï† ÏÉùÏÑ± Ï†úÌïú (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏):', { current: customRoles, max: limits.maxCustomRoles });
          toast.error(`${userMode} Î™®ÎìúÏóêÏÑúÎäî ÏµúÎåÄ ${limits.maxCustomRoles}Í∞úÏùò Ïª§Ïä§ÌÖÄ Ïó≠Ìï†Îßå ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.`);
          return false;
        }
        break;
        
      default:
        // Îã§Î•∏ Ïï°ÏÖòÎì§ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌóàÏö© (ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®Ïãú)
        console.log('‚úÖ Í∏∞Î≥∏ Ïï°ÏÖò ÌóàÏö© (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ fallback)');
        return true;
    }
    
    console.log('‚úÖ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†úÌïúÏÇ¨Ìï≠ Ï≤¥ÌÅ¨ ÌÜµÍ≥º');
    return true;
  };

  // Î°úÏª¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å (ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®Ïãú fallback)
  const handleLocalUsageTracking = (action: LimitationAction, metadata?: any) => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const trackingKey = `local_usage_${today}`;
      
      let usage = JSON.parse(localStorage.getItem(trackingKey) || '{}');
      
      switch (action) {
        case 'create_project':
          usage.projects = (usage.projects || 0) + 1;
          break;
        case 'create_conversation':
          usage.conversations = (usage.conversations || 0) + 1;
          break;
        case 'create_custom_role':
          usage.customRoles = (usage.customRoles || 0) + 1;
          break;
        case 'api_call':
          usage.apiCalls = (usage.apiCalls || 0) + 1;
          break;
        case 'export_chat':
          usage.exportedChats = (usage.exportedChats || 0) + 1;
          break;
      }
      
      localStorage.setItem(trackingKey, JSON.stringify(usage));
      console.log('üìä Î°úÏª¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å ÏôÑÎ£å:', { action, usage });
    } catch (error) {
      console.warn('Î°úÏª¨ ÏÇ¨Ïö©Îüâ Ï∂îÏ†Å Ïã§Ìå®:', error);
    }
  };

  // Î°úÏª¨ ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®Ïãú fallback)
  const getLocalUsageData = () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const trackingKey = `local_usage_${today}`;
      
      const localUsage = JSON.parse(localStorage.getItem(trackingKey) || '{}');
      
      // Ïï± ÏÉÅÌÉúÏôÄ Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Îç∞Ïù¥ÌÑ∞ Í≤∞Ìï©
      const result = {
        success: true,
        currentUsage: {
          projects: Math.max(state.projects.length, localUsage.projects || 0),
          conversations: Math.max(state.conversations.length, localUsage.conversations || 0),
          customRoles: Math.max(state.roles.filter(r => r.isCustom).length, localUsage.customRoles || 0),
          apiCallsToday: localUsage.apiCalls || 0,
          exportedChats: localUsage.exportedChats || 0
        },
        date: today,
        source: 'local_fallback'
      };
      
      console.log('üìä Î°úÏª¨ ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏôÑÎ£å:', result);
      return result;
    } catch (error) {
      console.warn('Î°úÏª¨ ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
      
      // ÏµúÏ¢Ö fallback - Ïï± ÏÉÅÌÉúÎßå ÏÇ¨Ïö©
      return {
        success: true,
        currentUsage: {
          projects: state.projects.length,
          conversations: state.conversations.length,
          customRoles: state.roles.filter(r => r.isCustom).length,
          apiCallsToday: 0,
          exportedChats: 0
        },
        date: new Date().toISOString().split('T')[0],
        source: 'app_state_fallback'
      };
    }
  };

  const getServerlessFeatureHandlers = () => ({
    handleRolePersistenceToggle,
    handleTimelineReminderSetup,
    handleKeywordResponseSetup,
    handleManualSummaryGeneration,
    // üéØ ÏÉàÎ°úÏö¥ Í≥†Í∏â Í∏∞Îä•Îì§
    handleAdvancedTimelineSettings,
    handleIntelligentSummaryGeneration,
    // üîê ÏÑúÎ≤ÑÎ¶¨Ïä§ Ï†úÌïúÏÇ¨Ìï≠ Ìï∏Îì§Îü¨Îì§
    handleServerlessLimitationCheck,
    handleServerlessUsageTracking,
    // Î™®ÎìúÎ≥Ñ Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏ (ÏÑúÎ≤ÑÎ¶¨Ïä§)
    getModeLimitations: async (userMode: 'standard' | 'advanced' | 'expert') => {
      try {
        return await ServerlessLimitationService.getModeLimitations(userMode);
      } catch (error) {
        console.warn('ÏÑúÎ≤ÑÎ¶¨Ïä§ Î™®ÎìúÎ≥Ñ Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏ Ïã§Ìå®:', error);
        return ServerlessLimitationService.getFallbackLimitations();
      }
    },
    // ÌòÑÏû¨ ÏÇ¨Ïö©Îüâ Ï°∞Ìöå (ÏÑúÎ≤ÑÎ¶¨Ïä§)
    getCurrentUsage: async () => {
      try {
        const userId = getCurrentUserId();
        console.log('üìä ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ïö©Îüâ Ï°∞Ìöå ÏãúÏûë:', { userId });
        
        const result = await getCurrentUsage(userId);
        console.log('‚úÖ ÏÑúÎ≤Ñ ÏÇ¨Ïö©Îüâ Ï°∞Ìöå ÏôÑÎ£å:', result);
        
        return result;
      } catch (error) {
        console.error('‚ùå ÏÑúÎ≤ÑÎ¶¨Ïä§ ÏÇ¨Ïö©Îüâ Ï°∞Ìöå Ïã§Ìå®:', error);
        
        // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
          console.log('üîÑ Î°úÏª¨ ÏÇ¨Ïö©Îüâ Îç∞Ïù¥ÌÑ∞Î°ú fallback');
          return getLocalUsageData();
        }
        
        // Í∏∞Î≥∏ fallback Îç∞Ïù¥ÌÑ∞
        return { 
          success: true,
          currentUsage: { 
            projects: state.projects.length, 
            conversations: state.conversations.length, 
            customRoles: state.roles.filter(r => r.isCustom).length, 
            apiCallsToday: 0, 
            exportedChats: 0 
          } 
        };
      }
    },
    // ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ï Ï°∞Ìöå
    getAdvancedTimelineSettings: async (chatId: string) => {
      try {
        const userId = getCurrentUserId();
        const userMode = state.userSettings.mode as 'standard' | 'advanced' | 'expert';
        return await conversationTimelineService.getAdvancedSettings(userId, chatId, userMode);
      } catch (error) {
        console.warn('ÌÉÄÏûÑÎùºÏù∏ Í≥†Í∏â ÏÑ§Ï†ï Ï°∞Ìöå Ïã§Ìå®:', error);
        return null;
      }
    },
    // Ïó≠Ìï† Í≥†Ï†ï ÏÉÅÌÉú ÌôïÏù∏
    checkRolePersistence: async (chatId: string) => {
      try {
        const userId = getCurrentUserId();
        const result = await getRolePersistence(userId, chatId);
        return result.settings ? result.settings.roleId : null;
      } catch (error) {
        console.warn('Ïó≠Ìï† Í≥†Ï†ï ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
        return null;
      }
    },
    // ÌÇ§ÏõåÎìú ÏÑ§Ï†ï ÌôïÏù∏
    checkKeywordSettings: async (chatId: string) => {
      try {
        const userId = getCurrentUserId();
        const result = await getKeywordSettings(userId, chatId);
        return result.settings ? result.settings.keywords : [];
      } catch (error) {
        console.warn('ÌÇ§ÏõåÎìú ÏÑ§Ï†ï ÌôïÏù∏ Ïã§Ìå®:', error);
        return [];
      }
    }
  });

  return {
    handleSendMessage,
    handleRoleSelect,
    handleNewChat,
    handleChatSelect,
    handleNewProject,
    handleProjectSelectionModalSelect,
    handleProjectSelectionModalNewProject,
    getChatActionHandlers,
    updateConversation,
    updateProject,
    deleteProject,
    addProject,
    deleteConversation,
    // üî• ÏÉàÎ°úÏö¥ ÏÑúÎ≤ÑÎ¶¨Ïä§ Í∏∞Îä•Îì§
    ...getServerlessFeatureHandlers()
  };
}